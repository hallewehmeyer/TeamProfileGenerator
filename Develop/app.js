const Manager = require("./lib/Manager");
const Engineer = require("./lib/Engineer");
const Intern = require("./lib/Intern");
const inquirer = require("inquirer");
const path = require("path");
const fs = require("fs");

const OUTPUT_DIR = path.resolve(__dirname, "output");
const outputPath = path.join(OUTPUT_DIR, "team.html");

const render = require("./lib/htmlRenderer");
const { boolean } = require("yargs");
const { start } = require("repl");
const { CustomConsole } = require("@jest/console");

let employeeArray = [];
let id = 0;
let questionsContinue = [{
type: "confirm",
message: "Would you like to add another employee?",
name: "addEmployee",
}]

const questionsManager = [{

    type: "input",
    message: "What is your office number?",
    name: "managerOfficeNumber",
}]


const questionsIntern = [{
    type: "input",
    message: "What school did you attend",
    name: "school",
}]
const questionsEngineer = [{
    type: "input",
    message: "What is your github url?",
    name: "github",
}]
const basicQuestions = [{
    type: "input",
    message: "What is your name",
    name: "name",
},
{
    type: "input",
    message: "What is your email",
    name: "email",
},
{
    type: "list",
    message: "What is your employee role?",
    name: "Role",
    choices: ["Engineer", "Intern", "Manager"]
}
]
function startEmployee(){


inquirer.prompt(basicQuestions).then(function (answers) {
    // console.log(answers);
    if (answers.Role === "Engineer") {
        inquirer.prompt(questionsEngineer).then(function (EngineerAnswers) {
            // console.log(EngineerAnswers)
            id = id+1;
            const engineer = new Engineer(answers.name, id, answers.email, EngineerAnswers.github)
            console.log(engineer)
            employeeArray .push(engineer)
            contEmployee()
        })
    }
    else if (answers.Role === "Intern") {
        inquirer.prompt(questionsIntern).then(function (InternAnswers) {
            // console.log(InternAnswers)
            id = id+1;
            const intern = new Intern(answers.name, id, answers.email, InternAnswers.school)
            console.log(intern)
            employeeArray .push(intern)
            contEmployee()
        })
    }
    else {
        inquirer.prompt(questionsManager).then(function (ManagerAnswers) {
            // console.log(ManagerAnswers)
            id = id+1;
            const manager = new Manager(answers.name, id, answers.email, ManagerAnswers.officeNumber)
            console.log(manager)
            employeeArray .push(manager)
            contEmployee()
        })
    

    };
})}
function contEmployee(){


inquirer.prompt(questionsContinue).then(function(continueAnswer){
    if (continueAnswer.addEmployee === true){
        startEmployee()
    }
    else {
       fs.writeFileSync(outputPath, render(employeeArray), 'utf8');
    }
})
}

startEmployee()




// It must loop through all the questions until the USER says they are done
// After getting the BASE questions (name, ID, email), the USER tells the program what ROLE the employee is
// Once the USER has done the above, the role-specific question is asked
// Once ALL of the above information has been entered, the employee is generated and pushed into an array
// Once the USER has stated they finished making employees, the html file (team.html) is generated by calling the render function

// #2, 3 and 4 are the INTERNAL of the loop

// #5 happens once the USER has finished making employees

// Write code to use inquirer to gather information about the development team members,
// and to create objects for each team member (using the correct classes as blueprints!)

// After the user has input all employees desired, call the `render` function (required
// above) and pass in an array containing all employee objects; the `render` function will
// generate and return a block of HTML including templated divs for each employee!

// After you have your html, you're now ready to create an HTML file using the HTML
// returned from the `render` function. Now write it to a file named `team.html` in the
// `output` folder. You can use the variable `outputPath` above target this location.
// Hint: you may need to check if the `output` folder exists and create it if it
// does not.

// HINT: each employee type (manager, engineer, or intern) has slightly different
// information; write your code to ask different questions via inquirer depending on
// employee type.

// HINT: make sure to build out your classes first! Remember that your Manager, Engineer,
// and Intern classes should all extend from a class named Employee; see the directions
// for further information. Be sure to test out each class and verify it generates an
// object with the correct structure and methods. This structure will be crucial in order
// for the provided `render` function to work! ```
